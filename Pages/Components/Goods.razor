@inject IDialogService DialogService


<MudItem lg="4" Class="d-flex flex-grow-1 ">
  <MudPaper Elevation="2" Class="bg-animation pa-5 d-flex flex-column justify-space-between flex-grow-1" MinWidth="320px">
      <MudItem>
        <MudItem Class="d-flex justify-space-between align-center">
          <MudText Typo="Typo.h4" GutterBottom="true">@Card.Title</MudText> 
          <MudSpacer />
          <MudChip Class="" Size="Size.Small">@Card.Counter</MudChip>
          <MudSwitch @bind-Checked="@IsChecked" Color="Color.Success" Class="mr-n3 ml-2" />
        </MudItem>
        <MudItem Class="mb-5">@Card.Text</MudItem>
      </MudItem>
      <MudItem Class="d-flex justify-space-between align-end flex-wrap"> 
        @* <MudRating SelectedValue="@Card.Range" MaxValue="5" Disabled="@(!IsChecked ? true : false)"/> *@
       <Range IsChecked=IsChecked Rating="@Card.Range"/>
       <MudText></MudText>
        <MudSpacer />
        <MudButtonGroup Variant="Variant.Outlined" >
          <MudButton Color="Color.Primary" Variant="Variant.Outlined" @onclick="(()=>Decrement())">
            <MudIcon Icon="@Icons.Filled.Remove"/>
          </MudButton>
          <MudButton Color="Color.Warning" Variant="Variant.Outlined" @onclick="(()=>Increment())">
            <MudIcon Icon="@Icons.Filled.Add"/>
          </MudButton>
        </MudButtonGroup>
        <MudButton Class="ml-2" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="(()=>Remove())">Remove</MudButton>
      </MudItem>
  </MudPaper>
</MudItem>



@code
{
  [Parameter] 
  public bool IsChecked { get; set; }
  [Parameter]
  public EventCallback<Guid> RemoveGoods { get; set; }
  [Parameter]
  public EventCallback<int> ChangeGoodsCount { get; set; }
  
  [Parameter]
  public CardModel Card { get; set; }



  private Task ChangeCount(int count)
  {
    Card.Counter += count;
    return ChangeGoodsCount.InvokeAsync(count);
  }

  private async Task Increment() => ChangeCount(1);


  private async Task Decrement()
  {
    if(Card.Counter > 0)
      await ChangeCount(-1);
  }

  
  private async Task Remove()
  {
    string header = "Remove This Item?";
    var options = new DialogOptions { CloseOnEscapeKey = true };
    var dialogresult = DialogService.Show<DialogRemoveItem>(header, options);
    var result = await dialogresult.Result;
    if(!result.Cancelled)
    {
      await RemoveGoods.InvokeAsync(Card.Id);
      await ChangeCount(-Card.Counter);
    }
  }

}




